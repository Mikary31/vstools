/****************************************************************************
**
** Copyright (C) 2015 The Qt Company Ltd.
** Contact: http://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see http://www.qt.io/terms-conditions. For further
** information use the contact form at http://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: http://www.gnu.org/copyleft/fdl.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page vsaddin-index.html
    \nextpage Getting Started
    \title Qt Visual Studio Add-in

    The Qt development tools are seamlessly integrated to Microsoft Visual
    Studio 2008 and later. The Qt Visual Studio Add-in allows developers to use
    the standard development environment without having to worry about any
    Qt-related build steps or tools.

    The main features of the add-in are:

    \list
    \li Wizards for creating new Qt projects and classes.
    \li Automated build setup for the Meta-Object Compiler(\c moc), the User
        Interface Compiler (\c uic), and the Resource Compiler (\c rcc).
    \li Import and export of Qt Project {\c .pro} and Project Include
        {\c .pri} files.
    \li Automated conversion of VS add-in to QMake project or the other way
        around.
    \li Integrated Qt resource management.
    \li Integrated Qt documentation.
    \li Debugging extensions for Qt data types.
    \endlist

    \note The Qt Visual Studio Add-in will not work on Visual Studio Express
    editions.

    Table of contents:

    \list 1
    \li \l{Getting Started}
    \li \l{Managing Projects}
    \li \l{Adding Form Files to the Project}
    \li \l{Managing Resources}
    \li \l{Creating Qt Translation Files for the Project}
    \li \l{Frequently Asked Questions}
    \endlist
*/

/*!
    \page vs-addin-getting-started.html
    \contentspage {Qt Visual Studio Add-in}{Contents}
    \previouspage Qt Visual Studio Add-in
    \nextpage Managing Projects
    \title Getting Started

    In this tutorial, we will create an address book application step-by-step
    using the Qt Visual Studio Add-in. We will also outline how to
    create a basic project using the Qt5 project wizard and design a form
    with \QD. In addition, we will also show you how to convert
    a Visual Studio project file into a \c{qmake} compatible \c{.pro} file.

    \section1 Prerequisite

    To create a Qt VS Add-in project, at least one Qt version must be added.
    Adding a Qt version enables you to choose the modules required for the
    project. For more details, see \l{Managing Projects}.

    \section1 Creating a Skeleton Qt Application

    The first step is to create a trivial project. To do so, select the
    \uicontrol{New Project} dialog in Visual Studio and click the \uicontrol{Qt5 Projects}
    folder. Then select the \uicontrol{Qt Application} item and type "AddressBook"
    in the \uicontrol{Name} field.

    When you click \uicontrol{OK}, a project wizard will appear. This wizard has a
    page listing Qt modules you can link your project against, followed by a
    page that enables you to specify the name of a skeleton class that will
    be generated by the wizard as a starting point. For this Address Book
    example, we will use the default values.

    Now, we have a small working Qt application. Press \key{F5} to try it out.
    The result is an empty window.

    \section1 Designing the Main Dialog

    Next, we will design the application's main dialog using \QD. See the
    \l{Qt Designer Manual} for
    more information.

    We begin by adding the widgets and setting their properties. These
    widgets are then put into layouts. The result is shown below.

    \image vs-addressbook-mainwindow.png Screenshot of the AddressBook's main dialog


    \section2 Adding the Widgets

    We launch \QD by double-clicking on the \c{Form Files\addressbook.ui} file
    in Visual Studio's Solution Explorer.

    First, we add the \l QListWidget. Expand the \uicontrol{Item-Based Widgets} group in
    the Widget Box, then click on the \uicontrol{List Widget} subitem and drag it to
    the top-left corner of the form. The \uicontrol{Property Editor} will now display
    the properties for the \l QListWidget object. Using this editor, set the
    \c ObjectName property to "addressList".

    Next, we insert the \uicontrol{Add} and \uicontrol{Delete} buttons. Expand the
    \uicontrol{Buttons} group in the Widget Box and drag two \uicontrol{Push Button}s to
    the top-right corner of the form. Rename the buttons to "addButton" and
    "deleteButton", and their \c Text property to "Add" and "Delete".

    Finally, we add two QLabel objects to display the selected item in the
    list by dragging the \uicontrol{Label} item from the \uicontrol{Display Widgets} group
    onto the form, once for each label.

    Rename the first label to "nameLabel" and change its \c Text property to
    "<No item selected>"; rename the second label to "emailLabel" and leave
    its \c Text property empty.

    Try to position the widgets as they appear in the screenshot above.


    \section2 Adding the Layouts

    In order to properly position the widgets and ensure that they resize
    accordingly when the form is resized, we need to add layouts to the form.

    We require a vertical layout for the buttons as well as a spacer to push
    the buttons to the top of the layout. To add a spacer, drag the
    \uicontrol{Vertical Spacer} item from the \uicontrol{Spacers} group onto the form.
    Then, select the buttons and the spacer (click on each widget while holding
    \key{Shift}) and click \uicontrol{Form|Layout Vertically}.

    The window also needs a layout to manage the positioning of other widgets
    as well as the button layout. So we add another layout by selecting the
    list widgets, the two labels and the button layout, and then clicking
    \uicontrol{Form|Layout in a Grid}.

    \note Make sure that the labels are almost as wide as the form;
    otherwise the grid layout will make them only as wide as the address list.

    To preview your form without compiling it, click \uicontrol{Form|Preview...}.
    To build and run the application, leave \QD after saving the form and press
    \key{F5} in Visual Studio.

    \section1 Adding an "Add Address" Dialog

    Now that the main dialog is done, we move on to add functionality to our
    address book application. We would like to have an application that
    pops up a dialog when the user clicks the \uicontrol{Add} button. Hence, we
    require an "Add Address" dialog.

    \section2 Designing the Dialog

    We start by designing the dialog. This time, there is no ready-made
    \c{.ui} file available in the project. So, we select
    \uicontrol{Project|Add Class...|Qt5 Classes|Qt5GuiClass}. This will invoke a
    wizard requesting for a class name.  Enter "AddDialog" as the name
    and "\l{QDialog}" as the base class. Then, check the "Multiple Inheritance"
    checkbox and click on the \uicontrol{Finish} button.

    You will now have an \c{adddialog.ui} file in the project's
    \uicontrol{Form Files} folder.

    \image vs-addressbook-adddialog.png Screenshot of the Add Address Dialog

    To set the properties of the dialog, double-click on \c{adddialog.ui} to
    open the form in \QD. Then, click on the form and set its \c WindowTitle
    property to "Add Address". Next, create the following widgets and set
    their \c ObjectName and \c Text properties according to values listed in
    the table below.

    \table
        \header
            \li Widget
            \li \c ObjectName
            \li \c Text
        \row
            \li \l QLabel
            \li "nameText"
            \li "Name:"
        \row
            \li \l QLabel
            \li "emailText"
            \li "Email:"
        \row
            \li \l QLineEdit
            \li "nameEdit"
            \li ""
        \row
            \li \l QLineEdit
            \li "emailEdit"
            \li ""
        \row
            \li \l QPushButton
            \li "okButton"
            \li "OK"
    \endtable

    Now you can lay out your widgets. Use a grid layout for the labels and
    line edits.


    \section2 Connecting to the Dialog's OK Button

    We want the \uicontrol{OK} button to invoke the QDialog::accept() slot, and we
    do this by clicking on the \uicontrol{Edit Signals/Slots} toolbar button. You will
    then enter \QD's \l{Signal and Slots Editing Mode}.

    Click on the \uicontrol{OK} button and drag the mouse cursor to an empty area of
    the form and release the mouse button. The \uicontrol{Configure Connection}
    dialog will pop up, allowing you to establish a signal-slot connection
    between the \uicontrol{OK} button and the form. Connect the button's
    \l{Buttonclicked}{QPushButton::clicked()} signal to the form's QDialog::accept()
    slot.


    \section2 Displaying the "Add Address" Dialog from the Application

    Once we have completed designing the dialog, we have to invoke it when the
    user clicks the main dialog's \uicontrol{Add} button. To achieve this behavior,
    we add a slot to the \c AddressBook class and invoke the \c AddDialog from
    this slot.

    Forms created using \QD call QMetaObject::connectSlotsByName() to
    establish connections between signals emitted by the form's child widgets
    and slots that follow the naming convention \c{on_<sender>_<signal>()}.
    To react on clicking the add button you must implement a slot
    called \c{on_addButton_clicked()}. Type
    in the following lines of code in the slot's body:

    \badcode
        AddDialog dialog(this);
        dialog.exec();
    \endcode

    If we want to connect to another signal, instead of
    \l{Buttonclicked}{QPushButton::clicked()}, we have to add another signal to
    the \c AddressBook class. This requires editing both the header file
    (\c addressbook.h) and the implementation file (\c addressbook.cpp).

    Next, we include \c adddialog.h to \c{addressbook.cpp}:

    \badcode
        #include "adddialog.h"
    \endcode

    Build and run the program now. If you click on the \uicontrol{Add} button, the
    \uicontrol{Add Address} dialog will pop up. If you click on \uicontrol{OK}, the dialog
    will disappear.


    \section1 Adding Items to the List Widget

    When the user clicks \uicontrol{OK}, we would like to add an item to the
    QListWidget. To do so, modify the code in the \c{on_addButton_clicked()}
    slot to the following:

    \code
        AddDialog dialog(this);

        if (dialog.exec()) {
		    QString name = dialog.nameEdit->text();
		    QString email = dialog.emailEdit->text();

		    if (!name.isEmpty() && !email.isEmpty()) {
			    QListWidgetItem *item = new QListWidgetItem(name, ui.addressList);
			    item->setData(Qt::UserRole, email);
			    ui.addressList->setCurrentItem(item);
		    }
	    }
	\endcode

    We execute the dialog. If the dialog is accepted, for example, \uicontrol{OK} is
    clicked, we extract the \uicontrol{Name} and \uicontrol{Email} fields and create a
    QListWidgetItem with the given information.

    Try out the application. Click \uicontrol{Add}, enter "John Doe" for the name and
    "john@johndoe.de" for the email. Click \uicontrol{OK}. The list widget should now
    contain the new item.


    \section1 Displaying the Selected Item

    When the user selects an item in the list widget, we would like to update
    the \c nameLabel and \c emailLabel at the bottom of the form. This behavior
    requires another slot to be added to the \c AddressBook class.

    In the \c addressbook.h file, add the following code in the
    \c{private slots} section of the class:

    \badcode
        void on_addressList_currentItemChanged();
    \endcode

    Then, add the block of code below to \c addressbook.cpp:

    \code
        void AddressBook::on_addressList_currentItemChanged()
        {
            QListWidgetItem *curItem = ui.addressList->currentItem();

	        if (curItem) {
		        ui.nameLabel->setText("Name: " + curItem->text());
                        ui.emailLabel->setText("Email: " +
                            curItem->data(Qt::UserRole).toString());
	        } else {
		        ui.nameLabel->setText("<No item selected>");
		        ui.emailLabel->clear();
	        }
        }
    \endcode

    Thanks to the naming convention, this slot will automatically be connected
    to \c{addressList}'s QListWidget::currentItemChanged() signal, and
    will be invoked whenever the selected item in the list changes.


    \section1 Adding Functionality for the Delete Button

    Similar to the \uicontrol{Add} button, we implement a slot for the \uicontrol{Delete}
    button. Open the \c addressbook.h file and add a new slot declaration
    \c{on_deleteButton_clicked()}. Then open \c addressbook.cpp and add the slot
    definition for \c{on_deleteButton_clicked()}.
    Type the following code in the slot's body:

    \code
        QListWidgetItem *curItem = ui.addressList->currentItem();

	    if (curItem) {
		    int row = ui.addressList->row(curItem);
		    ui.addressList->takeItem(row);
                    delete curItem;

		    if (ui.addressList->count() > 0)
			    ui.addressList->setCurrentRow(0);
		    else
			    on_addressList_currentItemChanged();
	    }
    \endcode

    Your application is now complete!


    \section1 Creating Qt Project File

    If you want to build this application on other platforms, you need to
    create a \c .pro file for the project. A simple way to do this is to let
    the Visual Studio Add-in create a basic \c .pro file for you by clicking
    \uicontrol{Qt|Create Basic .pro File}. When the \uicontrol{Export Project} dialog shows
    up, ensure that the \uicontrol{Create .pri File} option is checked, then click
    \uicontrol{OK}. Visual Studio will then ask you where to save the \c .pri file.
    The default location and name is usually sufficient, so just click
    \uicontrol{Save}. For more information about \c .pro files and their associated
    \c .pri files, see \l{Managing Projects}.

    That's it! You should now have a working \c .pro file and \c .pri file for
    your project. For more complex projects, manually editing the \c .pro file
    is required to make it work on all plaforms; however, for our simple
    project the generated \c .pro file is sufficient.
*/


/*!
    \page vs-addin-managing-projects.html
    \contentspage {Qt Visual Studio Add-in}{Contents}
    \previouspage Getting Started
    \nextpage Adding Form Files to the Project
    \title Managing Projects


    \section1 Creating New Qt Projects

    Once you have installed the add-in, Visual Studio's \uicontrol{New Project}
    dialog will contain a \uicontrol{Qt5 Projects} folder with the following project
    templates:

    \list 1
        \li \e{Qt Application:} A simple Qt GUI Application with one form.
        \li \e{Qt Quick2 Application:} A simple Hello World application.
        \li \e{Qt5 Designer Plugin:} A Qt Designer custom widget plugin.
        \li \e{Qt Console Application:} A basic Qt console application.
        \li \e{Qt Library:} A basic Qt-based dynamic library.
        \li \e{ActiveQt Server:} A simple ActiveX server.
    \endlist
    
    If you're using Visual Studio 2008, then two additional project
    types are available:
    
    \list 1
        \li \e{Qt WindowsCE Application:} A simple Qt GUI Application for
            Windows CE with one form.
        \li \e{Qt WindowsCE Library:} A basic Qt-based dynamic library for
            Windows CE.
    \endlist

    Each Qt project provides a wizard that allows you to specify the Qt modules
    required for your project. For some projects, the wizard will also generate
    a skeleton class that you can use to get started.

    If you have used the installer for the binary version of Qt, you are now
    ready to write Qt code and build your projects. Alternatively, if you have
    built Qt from source, then you must tell Visual Studio where to find Qt.
    This step is further explained in the \l{Basic Qt Version Management}
    section.


    \section1 Modifying Project Properties
    
    Qt related project properties can be modified by opening the Qt Project
    Settings dialog.
    To display this dialog, select the respective Qt project in
    the solution explorer and select \uicontrol{Qt5|Qt Project Settings}.
    
    \image vs-project-propertybrowser.png Screenshot of the property browser when selecting a Qt project
    
    The following Qt project settings can be changed:

    \table
        \header
            \li Property
            \li Description
        \row
            \li lreleaseoptions
            \li Additional command-line options for the lrelease tool.
        \row
            \li lupdateonbuild
            \li A flag that determines whether to create the translation files
                while building the project.
        \row
            \li lupdateoptions
            \li Additional command-line options for the lupdate tool.
        \row
            \li Version
            \li The Qt version to use for this project (see
                \l{Basic Qt Version Management}).
        \row
            \li MocDirectory
            \li The directory (relative to the project) where the generated
                \c moc files are put. This directory must include the
                \c $(ConfigurationName) variable, to ensure that the \c moc
                files for different configurations (e.g., \c debug or
                \c release) do not collide.
                You may use the variable \c $(PlatformName) to put generated files
                for different platforms into separate directories.
        \row
            \li MocOptions
            \li Additional command-line options for the moc build step.
        \row
            \li UicDirectory
            \li The directory (relative to the project) where the \c uic
                generated header files are put.
        \row
            \li RccDirectory
            \li The directory (relative to the project) where the \c rcc
                generated source files are put.
    \endtable

    When a Qt project is created, these properties are initialized to default
    values based on the last entered information found in the 
    the \uicontrol{Qt|Qt Project Settings} dialog.


    \section1 Basic Qt Version Management

    The Visual Studio Add-in offers its own simple Qt version management,
    enabling you to use multiple versions of Qt 5 in parallel. For example,
    Qt 5.3.2 and 5.4.1. When you install the add-in, the information about Qt
    versions is added to the user registry hive. So, another user will have to
    add a new Qt version since no default version will be set.
    
    To add or remove Qt versions, click \uicontrol{Qt5|Qt Options} and select the
    \uicontrol{Qt Versions} page. Click \uicontrol{Add}, then enter a name for the Qt
    version and the path to Qt's root directory, for example,
    \c{C:\\Qt5.4.1\\5.4"}. The first added Qt version is automatically
    the default version which will be used when creating new projects or
    importing a project from a \c{.pro} file. The default versions for Qt
    Windows or Windows CE projects can be changed using the combo boxes
    located under the \uicontrol{Qt Builds} list.

    It is also possible to use the Qt version set in the QTDIR environment
    variable. In order to do so create a version named \c{$(QTDIR)}. As the
    path is not needed the \uicontrol{Path} field will be grayed out.
    
    \image vs-options-qt-versions.png Screenshot of Qt versions configuration dialog
        
    To specify which Qt version a project should use, select the project node
    of a Qt project (for example, "Project1") in the Solution Explorer, and set
    its \c Version property using the Qt Project Settings.
    
    Changing the Qt version for all projects in the solution can be done by
    invoking the context menu of the solution and activating the \uicontrol{Change
    Solutions' Qt Version} item. You can then select your desired Qt version
    in the dialog listing all available Qt versions.

    \note When you set a Qt version for the solution, this version becomes the
    default version if you add new projects to the solution.

    Using the Qt Visual Studio Add-in does not require a globally set Qt
    environment variable. The Add-in will always overwrite the existing
    global Qt environment variable.

    \note If the build of your Qt projects fails with the error message
    \tt{The following environment variables were not found: $(QTDIR)},
    then the project is probably referencing an invalid Qt build.
    This can happen after uninstalling an old Qt version.
    To correct this, change the Qt version of your project to a
    valid one.


    \section1 Changing The Target Platform of Your Project

    If you are developing on the Windows CE platform, Visual Studio Add-in
    enables you to switch between Windows and Windows CE easily. It is possible
    to create a standard Windows project, develop and test your application on
    your desktop PC, then later convert it into a Qt on Windows CE version.

    The Visual Studio Add-in handles everything you need in order to create
    applications for Windows and Windows CE. There is no need to add a platform
    manually using the Visual Studio Configuration Manager. Just assign a
    Qt version to your project and the Add-in will create the according
    platform if needed.

    To switch between platforms choose the appropriate Qt version in the
    \uicontrol{Version} property using the property browser, as described above.


    \section1 Importing and Exporting Projects

    Qt and Visual Studio use different file formats to save projects. If you
    build your application on multiple platforms, you probably already use
    Qt \c .pro files with \c qmake; otherwise, you might use \c .vcproj files
    and Visual Studio to build your project, usually convenient for Windows-
    only development.

    Qt's Visual Studio add-in provides a way to combine both approaches
    - you do not have to manually maintain \c .pro files and \c .vcproj files
    in parallel. You start by creating a \c .vcproj file as usual. When you
    want a \c qmake \c .pro file, select \uicontrol{Qt5|Create Basic .pro File} to
    generate a \c .pro file where you can store Unix and/or OS X specific
    settings.
  
    \image vs-export-project.png Screenshot of export dialog

    If you have multiple Qt projects in one Visual Studio solution, the basic
    \c .pro file generator can create a master \c .pro file of type \c subdirs
    that includes all of the projects.

    The generated \c .pro file is not meant to be a complete file, but a simple
    starting point for porting to other platforms. Having said, these files
    should be sufficient for compiling the skeleton projects created by the
    predefined Qt project wizards. The \c .pro file includes a \c .pri file.

    The \c .pri file contains the list of source files, header files, \c .ui
    files, and \c .qrc files in the project. To generate the \c .pri file,
    select \uicontrol{Qt5|Export Project to .pri File}. Whenever you add or remove a
    file from the Visual Studio project file, you must regenerate the \c .pri
    file to ensure that the application can still be build on other platforms.

    Also, ensure that the included \c .pri file in the \c .pro file points to
    the right file. If you saved the \c .pri file in the suggested path and
    name, this should be correct.

    Developers on platforms other than Windows can add or remove files to the
    project by editing the \c .pri file. When this happens, Windows developers
    must select \uicontrol{Qt5|Import .pri File to Project} to bring the Visual Studio
    project file in sync with the \c .pri file.

    If your project contains platform-specific source files, these files should
    be listed in the \c .pro file so that they are not overwritten by the
    Visual Studio Add-in.

    In summary, a cross-platform Qt project consists of the following files:

    \list
        \li A \c .vcproj file containing Windows-specific settings and listing
            the files in the project.
        \li A \c .pro file containing Unix and/or OS X specific settings.
        \li A \c .pri file (a \c qmake include file) listing the files in the
            project.
    \endlist

    If you already have a \c .pro file but not a \c .vcproj file, select
    \uicontrol{Qt|Open Qt Project File (.pro)...} to convert your \c .pro file to a
    \c .vcproj file. Be aware that the generated \c .vcproj only contains
    Windows-specific settings. Also, there is no way to convert a \c .vcproj
    file back to a \c .pro file format, apart from the basic \c .pro mechanism
    described above.
*/


/*!
    \page vs-addin-adding-form-files.html
    \contentspage {Qt Visual Studio Add-in}{Contents}
    \previouspage Managing Projects
    \nextpage Managing Resources
    \title Adding Form Files to the Project

    The Visual Studio Add-in lets you launch \QD simply by double-clicking on a
    \c .ui file. See the \l{Qt Designer Manual} for more information.

    To add a new \c .ui file to the project, select \uicontrol{Project|Add New Item}
    and then select the \uicontrol{Qt Widget Form} or the \uicontrol{Qt Dialog Form}
    template from the \uicontrol{Qt Project Items} folder.

    Normally, you will need to wrap the code generated for the form file into
    a QWidget subclass to add signals or slots to it. A convenient way to do
    this is to select \uicontrol{Project|Add Class} and then select \uicontrol{Qt5GuiClass}
    from the \uicontrol{Qt5Classes} folder. This will create a \c .ui file, a \c .h
    file, and a \c .cpp file for you.

    \section1 Creating Form Templates
    
    You can add customized form templates by following these steps:
    \list
    \li Create a form in the \QD and save the \c{.ui} file
        (e.g. \c{mydialog.ui}).
    \li Copy \c{mydialog.ui} to the \c{uiItems\} directory within the
        Qt Visual Studio Add-in installation directory.
    \li Create an icon file named \c{mydialog.ico}.
        It should have a size of 32x32 pixels.
    \endlist

    After the next start of Visual Studio you can add new forms using
    your custom template.
*/

/*!
    \page vs-addin-managing-resources.html
    \contentspage {Qt Visual Studio Add-in}{Contents}
    \previouspage Adding Form Files to the Project
    \nextpage Creating Qt Translation Files for the Project
    \title Managing Resources

    Adding new resources to a Qt project is similar to adding resources to a
    normal C++ project, the main difference being that \c .qrc files (Qt
    resource files) are used instead of Windows \c .rc files. Unlike \c .rc
    files, \c .qrc files work on all platforms supported by Qt and are trivial
    to load from Qt code.
    
    \image vs-qrc-editor.png Screenshot of the .qrc editor

    To add new resources, you must first create a new \c .qrc file. To do this,
    open the \uicontrol{Add New Item} dialog, select \uicontrol{Qt Resource File} from the
    \uicontrol{Qt Project Items} folder, and click \uicontrol{Open}. The newly created
    \c .qrc file will be displayed in the Qrc Editor, which is part of the
     Add-in installation.

    At this point, the \c .qrc file only contains a prefix named after the
    project. You can add resources under that prefix by selecting it and
    clicking on the \uicontrol{Add} button on the right hand side. Then click
    \uicontrol{Add File} in the context menu. Now the \uicontrol{Resource Editor} will
    display a dialog that allows you to add an existing file.

    When referring to the resources later on from Qt code, you must prepend the
    prefix, the file name, and a colon. For example, \c{:/MyProject/print.bmp}.
    Using the context menu, you can rename the predefined prefix or add other
    prefixes to the \c .qrc file.
    
    For more information see the \l{Qt Resource System}{Qt resource system}
    topic.
*/

/*!
    \page vs-addin-creating-translation-files.html
    \contentspage {Qt Visual Studio Add-in}{Contents}
    \previouspage Managing Resources
    \nextpage Frequently Asked Questions
    \title Creating Qt Translation Files for the Project

    To add a new translation file to the project, select
    \uicontrol{Qt|Create New Translation File}. In the \uicontrol{Add Translation} dialog,
    you can choose the language to create a translation file. A suggested file
    name is provided, and will be created when you click \uicontrol{OK}. The
    translation file is placed in the \uicontrol{Translation Files} folder in Visual
    Studio's Solution Explorer. Right-clicking on a translation file displays
    a menu that allows you to invoke \c lupdate, \c lrelease, and \QL.

    For more information on Qt's translation tools, see the
    \l{Qt Linguist Manual}{Qt Linguist manual}.
*/


/*!
    \page vs-addin-faq.html
    \contentspage {Qt Visual Studio Add-in}{Contents}
    \previouspage Creating Qt Translation Files for the Project
    \title Frequently Asked Questions

    \section1 Why is code completion not working?
    
    \section2 You're implementing a slot...

    Visual Studio can only provide code completion as long as it understands
    the code. Unfortunately, it does not know how to handle the Qt keyword
    \c slots in the header file. This means that the respective function body
    is foreign to the code model and no code completion will be provided. You
    can workaround the problem be placing a \c{';'} after the colon of the
    \c slots keyword in the class declaration.

    \note Remember to remove the \c ';' when exporting the project as the code
    might not compile with older Unix compilers.

    \badcode
    class MyClass {
        Q_OBJECT
        
    public slots:;
        void doSomething();
        
      ...
    };
    \endcode
    
    
    \section2 You are referencing objects from a \c{.ui} file

    The Visual Studio code model parser only parses C++ sources, meaning that
    widgets or objects defined in \c{.ui} files will not be accessible. To
    workaround the problem, the Qt Visual Studio Add-in automatically
    generates C++ code from the \c{.ui} file by saving the file and running
    \c{uic} on it. This step is done everytime the project is built. If the 
    code completion does not work, try to rebuild the project. It is possible that
    you have to wait some time, before code completion fully works after updating an
    \c{.ui} file. For more information, you can refer to the 
    \l{Managing Projects#Modifying Project Properties}{Modifying Project Properties}
    section.
      

    \section2 It still does not work

    You should refresh the code model, Intellisense. This is done by opening
    the solution explorer, invoking the context menu of the project and
    activating the item \uicontrol{Update Intellisense}.
*/

